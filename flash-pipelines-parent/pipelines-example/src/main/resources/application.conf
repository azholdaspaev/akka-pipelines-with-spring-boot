pipeline {
  actor.pool.first {
    router = round-robin-pool
    numberOfActors = 1
    actorType = SIMPLE_ACTOR
    name = first
  }

  actor.pool.second {
    router = round-robin-pool
    numberOfActors = 1
    actorType = SIMPLE_ACTOR
    name = second
  }

  actor.pool.third {
    router = round-robin-pool
    numberOfActors = 1
    actorType = SIMPLE_ACTOR
    name = third
  }

  actor.pool.fourth {
    router = round-robin-pool
    numberOfActors = 1
    actorType = FINALIZER_ACTOR
    name = fourth
  }
}

akka {
  # Loggers to register at boot time (akka.event.Logging$DefaultLogger logs
  # to STDOUT)
  loggers = ["akka.event.Logging$DefaultLogger"]
  # Options: OFF, ERROR, WARNING, INFO, DEBUG
  loglevel = "INFO"

  log-dead-letters = 10
  log-dead-letters-during-shutdown = on

  # Log the complete configuration at INFO level when the actor system is started.
  # This is useful when you are uncertain of what configuration is used.
  log-config-on-start = off

  actor {
    debug {
      # enable function of LoggingReceive, which is to log any received message at
      receive = off
      # enable DEBUG logging of all AutoReceiveMessages (Kill, PoisonPill et.c.)
      autoreceive = off
      # enable DEBUG logging of actor lifecycle changes
      lifecycle = off
      # enable DEBUG logging of all LoggingFSMs for events, transitions and timers
      fsm = off
      # enable DEBUG logging of subscription changes on the eventStream
      event-stream = off
    }

    default-dispatcher {
      # Dispatcher is the name of the event-based dispatcher
      type = Dispatcher
      # What kind of ExecutionService to use
      executor = "fork-join-executor"
      # Configuration for the fork join pool
      fork-join-executor {
        # Min number of threads to cap factor-based parallelism number to
        parallelism-min = 2
        # Parallelism (threads) ... ceil(available processors * factor)
        parallelism-factor = 2.0
        # Max number of threads to cap factor-based parallelism number to
        parallelism-max = 8
      }
      # Throughput defines the maximum number of messages to be
      # processed per actor before the thread jumps to the next actor.
      # Set to 1 for as fair as possible.
      throughput = 100
    }
  }

  http {
    idle-timeout = 5 s
    request-timeout = 30 s
  }
}